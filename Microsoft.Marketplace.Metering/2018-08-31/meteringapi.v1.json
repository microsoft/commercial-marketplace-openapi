{
  "openapi": "3.0.2",
  "servers": [
    {
      "description": "Marketplace Metering APIs, version 1",
      "url": "https://marketplaceapi.microsoft.com/api"
    }
  ],
  "info": {
    "version": "2018-08-31",
    "title": "Metering API",
    "x-ms-code-generation-settings": {
      "name": "MarketplaceMeteringClient",
      "header": "MIT",
      "internalConstructors": true,
      "useDateTimeOffset": false
    },
    "description": "With the commercial marketplace metering service, you can create software as a service (SaaS) and managed application offers which charge according to non-standard units. Before publishing an offer to the commercial marketplace, you define the billing dimensions such as bandwidth, tickets, or emails processed. Customers then pay according to their consumption of these dimensions, with your system informing Microsoft via the commercial marketplace metering service API of billable events."
  },
  "security": [
    {
      "AADToken": ["user_impersonation"]
    }
  ],

  "paths": {
    "/usageEvent": {
      "post": {
        "summary": "Posts a single usage event to the marketplace metering service API.",
        "description": "Posts a single usage event to the marketplace metering service API.",
        "operationId": "MeteringOperations_PostUsageEvent",
        "tags": ["MarketplaceMeter"],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "schema": {
              "$ref": "#/components/schemas/ApiVersion"
            },
            "required": true,
            "description": "Version of the API."
          },
          {
            "in": "header",
            "name": "x-ms-requestid",
            "x-ms-client-name": "requestId",
            "description": "A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "x-ms-correlationid",
            "x-ms-client-name": "correlationId",
            "description": "A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageEventOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, missing or invalid data provided or expired.",
            "x-ms-error-response": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageEventBadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "User is unauthorized to make this call.",
            "x-ms-error-response": true
          },
          "409": {
            "description": "Conflict, when we receive the usage call for the usage resource ID, and effective usage, which already exists. The response will contain additionalInfo field that contains info about the accepted message.",
            "x-ms-error-response": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageEventConflictResponse"
                }
              }
            }
          }
        }
      }
    },
    "/batchUsageEvent": {
      "post": {
        "summary": "Posts a set of usage events to the marketplace metering service API.",
        "description": "The batch usage event API allows you to emit usage events for more than one purchased entity at once. The batch usage event request references the metering services dimension defined by the publisher when publishing the offer.",
        "operationId": "MeteringOperations_PostBatchUsageEvent",
        "tags": ["MarketplaceMeter"],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "schema": {
              "$ref": "#/components/schemas/ApiVersion"
            },
            "required": true,
            "description": "Version of the API."
          },
          {
            "in": "header",
            "name": "x-ms-requestid",
            "x-ms-client-name": "requestId",
            "description": "A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "x-ms-correlationid",
            "x-ms-client-name": "correlationId",
            "description": "A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchUsageEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchUsageEventOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The batch contained more than 25 usage events.",
            "x-ms-error-response": true
          },
          "403": {
            "description": "User is unauthorized to make this call.",
            "x-ms-error-response": true
          }
        }
      }
    },
    "/usageEvents": {
      "post": {
        "summary": "List of usage events.",
        "description": "You can call the usage events API to get the list of usage events.",
        "operationId": "MeteringOperations_GetUsageEvent",
        "tags": ["MarketplaceMeter"],
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "schema": {
              "$ref": "#/components/schemas/ApiVersion"
            },
            "required": true,
            "description": "Version of the API."
          },
          {
            "in": "query",
            "name": "usageStartDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },            
            "required": true,
            "description": "DateTime in ISO8601 format. For example, 2020-12-03T15:00 or 2020-12-03."
          },
          {
            "in": "query",
            "name": "UsageEndDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "DateTime in ISO8601 format. Default = current date."
          },
          {
            "in": "query",
            "name": "offerId",
            "schema": {
              "type": "string"
            },
            "description": "OfferId."
          },
          {
            "in": "query",
            "name": "planId",
            "schema": {
              "type": "string"
            },
            "description": "PlanId."
          },
          {
            "in": "query",
            "name": "dimension",
            "schema": {
              "type": "string"
            },
            "description": "DimensionId."
          },
          {
            "in": "query",
            "name": "azureSubscriptionId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Azure Subscription Id."
          },
          {
            "in": "query",
            "name": "reconStatus",
            "schema": {
              "$ref": "#/components/schemas/ReconStatus"
            },
            "description": "Recon Status."
          },
          {
            "in": "header",
            "name": "x-ms-requestid",
            "x-ms-client-name": "requestId",
            "description": "A unique string value for tracking the request from the client, preferably a GUID. If this value isn't provided, one will be generated and provided in the response headers.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "x-ms-correlationid",
            "x-ms-client-name": "correlationId",
            "description": "A unique string value for operation on the client. This parameter correlates all events from client operation with events on the server side. If this value isn't provided, one will be generated and provided in the response headers.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsageEventOkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, missing or invalid data provided or expired.",
            "x-ms-error-response": true
          },
          "403": {
            "description": "The authorization token isn't provided, is invalid or expired. Or the request is attempting to access a subscription for an offer that was published with a different Microsoft Entra App ID from the one used to create the authorization token.",
            "x-ms-error-response": true
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "AADToken": {
        "type": "oauth2",
        "description": "Azure Active Directory OAuth2 Flow",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://login.microsoftonline.com/{your-app-tenant-id}/oauth2/token"
          }
        }
      }
    },
    "schemas": {
      "ApiVersion": {
        "type": "string",
        "description": "The request must send the following parameters as a URL Encoded form; grant_type - client_credentials; resource - 20e940b3-4c77-4b0b-9a53-9e16a1b010a7; client_id - AAD Registered App Client ID; client_secret - AAD Registered App Client Secret",
        "enum": ["2018-08-31"],
        "default": "2018-08-31"
      },
      "UsageEvent": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string",
            "format": "uuid",
            "description": "subscriptionId property value for SaaS offer subscriptions; resourceUsageId property on the managed application resource for managed application offers. For managed applications, only use one of resourceId or resourceUri."
          },
          "resourceUri": {
            "type": "string",
            "description": "Resource URI for the managed app. Used with managed applications. Only use resourceUri or resourceId, but never both."
          },
          "quantity": {
            "description": "Number of units consumed",
            "type": "number",
            "format": "double"
          },
          "dimension": {
            "type": "string",
            "description": "Dimension identifier"
          },
          "effectiveStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "Time in UTC when the usage event occurred"
          },
          "planId": {
            "type": "string",
            "description": "Plan associated with the purchased offer"
          }
        }
      },
      "BatchUsageEvent": {
        "type": "object",
        "properties": {
          "request": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageEvent"
            },
            "minItems": 1,
            "maxItems": 25
          }
        }
      },
      "UsageEventOkResponse": {
        "type": "object",
        "properties": {
          "usageEventId": {
            "description": "Unique identifier associated with the usage event",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"            
          },
          "messageTime": {
            "description": "Time this message was created in UTC",
            "type": "string",
            "format": "date-time"
          },
          "resourceId": {
            "description": "Identifier of the resource against which usage is emitted",
            "type": "string",
            "format": "uuid"
          },
          "resourceUri": {
            "description": "Identifier of the managed app resource against which usage is emitted",
            "type": "string"
          },
          "quantity": {
            "description": "Number of units consumed",
            "type": "number",
            "format": "double"
          },
          "dimension": {
            "type": "string",
            "description": "Dimension identifier"
          },
          "effectiveStartTime": {
            "description": "Time in UTC when the usage event occurred",
            "type": "string",
            "format": "date-time"
          },
          "planId": {
            "type": "string",
            "description": "Plan associated with the purchased offer"
          }
        }
      },
      "GetUsageEventOkResponse": {
        "type": "object",
        "properties": {
          "request": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUsageEvent"
            }
          }
        }
      },
      "GetUsageEvent": {
        "type": "object",
        "properties": {
          "usageDate": {
            "type": "string",
            "format": "date-time",
            "description": "Time in UTC when the usage event occurred"
          },
          "usageResourceId": {
            "type": "string",
            "format": "uuid",
            "description": "Identifier of the resource against which usage is emitted"          
          },
          "dimension": {
            "type": "string",
            "description": "Dimension"
          },
          "planId": {
            "type": "string",
            "description": "PlanId"
          },
          "planName": {
            "type": "string",
            "description": "PlanName"
          },
          "offerId": {
            "type": "string",
            "description": "OfferId"
          },
          "offerName": {
            "type": "string",
            "description": "OfferName"
          },
          "offerType": {
            "type": "string",
            "description": "OfferType"
          },
          "azureSubscriptionId": {
            "type": "string",
            "format": "uuid",
            "description": "Azure Subscription Id"
          },
          "reconStatus": {
            "$ref": "#/components/schemas/ReconStatus",
            "description": "Recon Status"
          },
          "submittedQuantity": {
            "type": "number",
            "format": "double",
            "description": "Submitted Quantity"
          },
          "processedQuantity": {
            "type": "number",
            "format": "double",
            "description": "Processed Quantity"
          },
          "submittedCount": {
            "type": "number",
            "format": "double",
            "description": "Submitted count"
          }
        }
      },
      "StatusEnum":{
        "description": "Status of the operation.",
        "type": "string",
        "enum": [
          "Accepted",
          "Expired",
          "Duplicate",
          "Error",
          "ResourceNotFound",
          "ResourceNotAuthorized",
          "ResourceNotActive",
          "InvalidDimension",
          "InvalidQuantity",
          "BadArgument"
        ],
        "x-ms-enum": {
          "name": "UsageEventStatusEnum",
          "modelAsString": false
        }
      },
      "ReconStatus":{
        "description": "Reconcilliation status of the submitted meter.",
        "type": "string",
        "enum": [
          "Submitted",
          "Accepted",
          "Rejected",
          "Mismatch"
        ],
        "x-ms-enum": {
          "name": "ReconStatusEnum",
          "modelAsString": false
        }
      },
      "BatchUsageEventOkResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
                  "$ref": "#/components/schemas/UsageBatchEventOkMessage"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "UsageEventConflictResponse": {
        "type": "object",
        "properties": {
          "additionalInfo": {
            "type": "object",
            "properties": {
              "acceptedMessage": {
                "$ref": "#/components/schemas/UsageEventOkResponse"
              }
            }
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "UsageBatchEventOkMessage":{
        "type": "object",
        "properties": {
          "usageEventId": {
            "description": "Unique identifier associated with the usage event",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"            
          },
          "messageTime": {
            "description": "Time this message was created in UTC",
            "type": "string",
            "format": "date-time"
          },
          "resourceId": {
            "description": "Identifier of the resource against which usage is emitted",
            "type": "string",
            "format": "uuid"
          },
          "resourceUri": {
            "description": "Identifier of the managed app resource against which usage is emitted",
            "type": "string"
          },
          "quantity": {
            "description": "Number of units consumed",
            "type": "number",
            "format": "double"
          },
          "dimension": {
            "type": "string",
            "description": "Dimension identifier"
          },
          "effectiveStartTime": {
            "description": "Time in UTC when the usage event occurred",
            "type": "string",
            "format": "date-time"
          },
          "planId": {
            "type": "string",
            "description": "Plan associated with the purchased offer"
          },
          "error": {
            "type": "object",
            "$ref": "#/components/schemas/UsageEventConflictResponse"
          }
        }
      },
      "UsageEventBadRequestResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageEventBadRequestResponseDetail"
            }
          }
        }
      },
      "UsageEventBadRequestResponseDetail": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      }
    }
  }
}
